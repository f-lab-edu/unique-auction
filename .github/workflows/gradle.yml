# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "develop" ,"master" ]
  pull_request:
    branches: [ '*' ]
jobs:
  # 체크아웃 / 버전 설정
  setUp:
    runs-on: ubuntu-latest
    steps:


      # 자바 버전 설정 11버전
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

  #  코드포맷
  codeFormatCheck:
    needs: setUp
    runs-on: ubuntu-latest
    steps:

      # 코드 체크  아웃
      - uses: actions/checkout@v3

      # 코드 포맷
      - name: codeFormat Check
        run: ./gradlew checkstyleMain

  testCheck:
    needs: setUp
    runs-on: ubuntu-latest
    steps:

      # 코드 체크  아웃
      - uses: actions/checkout@v3

      # 테스트는 전부 성공해야 통과.
      - name: Test with Gradle
        run: spring_profiles_active=test ./gradlew clean build --build-cache -x checkstyleTest -x checkstyleMain

      # 테스트 후 결과를 보기 위한 단계 추가
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: ${{ always() }}
        with:
          files: build/test-results/**/*.xml

      # 캐싱 제거 테스트를 더빠르게 해준다. 캐싱을 함으로서 재컴파일 필요 없고
      # 종속성된 파일들을 원격 저장소에서 다운로드 할필요없이 캐시 복원된다
      - name: Cleanup Gradle Cache
        if: ${{ always() }}
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  Build:
    needs: [ codeFormatCheck, testCheck ]
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v3
      # 실제 어플리케이션 빌드시 -x 옵션을 통해 test와 컨벤션(위에서해줌) 제외한다.
      - name: Build with Gradle
        run: ./gradlew build -x test -x checkstyleTest -x checkstyleMain
 # 작업명
  CD:
    ## NCP OS : Ubuntu 18.04
    needs: [ Build ]
    runs-on: ubuntu-18.04

    steps:
      ## Project JDK 11 Setting
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      
      # Gradle의 사용권한 셋팅
      - name: Grant Execute permission for gradlew
        run: chmod +x gradlew
        shell: bash

 


      # 프로젝트 테스트 진행없이 빌드
      - name: Build with Gradle
        run: ./gradlew build -x test -x checkstyleTest -x checkstyleMain
        shell: bash


#       # 운영서버용 Docker 빌드 생성 및 푸시
#       - name: prod Docker build & push
#         if: contains(github.ref, 'master')
#         run: |
#           docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
#           docker build -f Dockerfile-prod -t ${{ secrets.DOCKER_REPO }}/nooblol-prod .
#           docker push ${{ secrets.DOCKER_REPO }}/nooblol-prod

      #운영서버 SSH접속 및 배포 - 현재 운영서버는 셋팅이 되어있지 않아 모두 주석으로 진행하였다.
      # Main Deploy
      - name: Deploy to Release
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'main')
        with:
         host: ${{ secrets.NCP_RELEASE_SERVER_IP }}
         username: ${{ secrets.NCP_RELEASE_SERVER_USER }}
         password: ${{ secrets.NCP_RELEASE_SERVER_PASSWORD }}
         port: ${{ secrets.NCP_RELEASE_SERVER_SSH_PORT }}
         script: |
           sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
           sudo docker rm -f $(docker ps -q -a)
           sudo docker pull ${{ secrets.DOCKER_REPO }}/nooblol-prod
           docker-compose up -d
           docker image prune -f
