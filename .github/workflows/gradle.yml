# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "develop" , "release" ]
  pull_request:
    branches: [ '*' ]
jobs:
  set_up:
    runs-on: ubuntu-18.04
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

  #  코드포맷
  code_format_check:
    needs: set_up
    runs-on: ubuntu-18.04
    steps:
      # 코드 체크 아웃
      - uses: actions/checkout@v3

      # 코드 포맷
      - name: Code Format Check
        run: ./gradlew checkstyleMain

  test_check:
    needs: set_up
    runs-on: ubuntu-18.04
    steps:
      # 코드 체크 아웃
      - uses: actions/checkout@v3

      # 테스트는 전부 성공해야 통과.
      - name: Test with Gradle
        run: spring_profiles_active=docker-test ./gradlew clean build --build-cache -x checkstyleTest -x checkstyleMain

      # 테스트 후 결과를 보기 위한 단계 추가
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: ${{ always() }}
        with:
          files: build/test-results/**/*.xml

      # 캐싱 제거 테스트를 더빠르게 해준다. 캐싱을 함으로서 재컴파일 필요 없고
      # 종속성된 파일들을 원격 저장소에서 다운로드 할필요없이 캐시 복원된다
      - name: Cleanup Gradle Cache
        if: ${{ always() }}
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  build_docker_image:
    needs: [ code_format_check, test_check ]
    runs-on: ubuntu-18.04
    if: contains(${{ github.ref_name }}, 'feature')
    # github branch에 feature가 포함되면 deploy 실행한다.
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/clockbox:latest